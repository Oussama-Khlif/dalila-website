# Generated by Django 5.1.1 on 2024-09-29 16:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Absence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_to', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_present', models.BooleanField(default=False)),
                ('is_absent', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_payed', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Atelier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_teacher', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('duration', models.IntegerField()),
                ('default', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('matricule', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('parent_number', models.CharField(max_length=15)),
                ('date_of_birth', models.DateField()),
                ('date_registered', models.DateTimeField(auto_now_add=True)),
                ('role', models.CharField(choices=[('student', 'Etudiant'), ('teacher', 'Enseignant'), ('none', 'Non Etudiant')], default='student', max_length=10)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('absence_alert', models.DateField(blank=True, help_text='Date of the absence alert.', null=True)),
                ('upcoming_absence_date', models.DateField(blank=True, help_text='Date of the next planned absence.', null=True)),
                ('rattrappage', models.DateTimeField(blank=True, help_text='Date and time for any makeup class or session.', null=True)),
                ('extratime', models.BooleanField(default=False, help_text='Indicates if extra time is allocated.')),
                ('registration_type', models.CharField(choices=[('bimestriel', 'Bimestriel'), ('annuel', 'Annuel'), ('none', 'None')], default='none', max_length=10)),
                ('facture', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), help_text='Amount of the facture issued.', max_digits=10, null=True)),
                ('subscription_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('refund', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Montant rembours√©', max_digits=10)),
                ('remise', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Remise en pourcentage', max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
